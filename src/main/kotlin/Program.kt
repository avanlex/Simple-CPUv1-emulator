class Program {
    /**
     * This is not a full test of all functional units, with all possible data values,
     * or all possible combinations of instructions, as this would take forever,
     * but this code does test typical usage so should highlight any major issues
     */
    companion object {
        val test_ram_size = 0x20
        val test_ram = arrayOf(
            0b00000000_00000001,  // 00   LOAD ACC  0x01     -
            0b01000000_00000000,  // 01   ADD  ACC, 0x00     - test NZ NC ACC=1
            0b01000000_11111111,  // 02   ADD  ACC, 0xFF     - test Z  C  ACC=0
            0b00000000_10101010,  // 03   LOAD ACC  0xAA     -
            0b00010000_00001111,  // 04   AND  ACC, 0x0F     - test NZ NC ACC=0x0A
            0b00010000_00000000,  // 05   AND  ACC, 0x00     - test Z  NC ACC=0x00
            0b00000000_00000001,  // 06   LOAD ACC  0x01     -
            0b01100000_00000001,  // 07   SUB  ACC, 0x01     - test Z  NC ACC=0x00
            0b01100000_00000001,  // 08   SUB  ACC, 0x01     - test NZ C  ACC=0xFF
            0b11100000_11110000,  // 09   OUTPUT ACC, 0xF0   - test M[0xF0] = 0xFF
            0b00000000_00000000,  // 0A   LOAD  ACC  0x00    -
            0b10100000_11110000,  // 0B   INPUT ACC, 0xF0    - test ACC = 0xFF
            0b01000000_00000000,  // 0C   ADD   ACC, 0x00    - test NZ NC ACC=0x01
            0b10010100_00001111,  // 0D   JUMP  NZ,  0x0F    - skip trap if correct
            0b10000000_00001110,  // 0E   JUMP  0x0E         - trap
            0b01000000_00000001,  // 0F   ADD   ACC, 0x01    - test Z NC ACC=0x00
            0b10010000_00010010,  // 10   JUMP  Z,   0x12    - skip trap if correct
            0b10000000_00010001,  // 11   JUMP  0x11         - trap
            0b00000000_00000010,  // 12   LOAD  ACC  0x02
            0b01000000_11111111,  // 13   ADD   ACC, 0xFF    - test NZ C ACC=0x01
            0b10011000_00010110,  // 14   JUMP  C,   0x16    - skip trap if correct
            0b10000000_00010101,  // 15   JUMP  0x15         - trap
            0b01100000_00000001,  // 16   SUB   ACC, 0x01    - test Z  NC ACC=0x00
            0b10011000_00011001,  // 17   JUMP  NC,  0x19    - skip trap if correct
            0b10000000_00011000,  // 18   JUMP  0x15         - trap
            0b10000000_00000000,  // 19   JUMP  0x00         - loop
            // ZERO DATA
            0b00000000_00000000,  // 1A
            0b00000000_00000000,  // 1B
            0b00000000_00000000,  // 1C
            0b00000000_00000000,  // 1D
            0b00000000_00000000,  // 1E
            0b00000000_00000000,  // 1F
            0b00000000_00000000,  // 20
            0b00000000_00000000,  // 21
            0b00000000_00000000,  // 22
            0b00000000_00000000,  // 23
            0b00000000_00000000,  // 24
            0b00000000_00000000,  // 25
            0b00000000_00000000,  // 26
            0b00000000_00000000,  // 27
            0b00000000_00000000,  // 28
            0b00000000_00000000,  // 29
            0b00000000_00000000,  // 2A
            0b00000000_00000000,  // 2B
            0b00000000_00000000,  // 2C
            0b00000000_00000000,  // 2D
            0b00000000_00000000,  // 2E
            0b00000000_00000000,  // 2F
            0b00000000_00000000,  // 30
            0b00000000_00000000,  // 31
            0b00000000_00000000,  // 32
            0b00000000_00000000,  // 33
            0b00000000_00000000,  // 34
            0b00000000_00000000,  // 35
            0b00000000_00000000,  // 36
            0b00000000_00000000,  // 37
            0b00000000_00000000,  // 38
            0b00000000_00000000,  // 39
            0b00000000_00000000,  // 3A
            0b00000000_00000000,  // 3B
            0b00000000_00000000,  // 3C
            0b00000000_00000000,  // 3D
            0b00000000_00000000,  // 3E
            0b00000000_00000000,  // 3F
            0b00000000_00000000,  // 40
            0b00000000_00000000,  // 41
            0b00000000_00000000,  // 42
            0b00000000_00000000,  // 43
            0b00000000_00000000,  // 44
            0b00000000_00000000,  // 45
            0b00000000_00000000,  // 46
            0b00000000_00000000,  // 47
            0b00000000_00000000,  // 48
            0b00000000_00000000,  // 49
            0b00000000_00000000,  // 4A
            0b00000000_00000000,  // 4B
            0b00000000_00000000,  // 4C
            0b00000000_00000000,  // 4D
            0b00000000_00000000,  // 4E
            0b00000000_00000000,  // 4F
            0b00000000_00000000,  // 50
            0b00000000_00000000,  // 51
            0b00000000_00000000,  // 52
            0b00000000_00000000,  // 53
            0b00000000_00000000,  // 54
            0b00000000_00000000,  // 55
            0b00000000_00000000,  // 56
            0b00000000_00000000,  // 57
            0b00000000_00000000,  // 58
            0b00000000_00000000,  // 59
            0b00000000_00000000,  // 5A
            0b00000000_00000000,  // 5B
            0b00000000_00000000,  // 5C
            0b00000000_00000000,  // 5D
            0b00000000_00000000,  // 5E
            0b00000000_00000000,  // 5F
            0b00000000_00000000,  // 60
            0b00000000_00000000,  // 61
            0b00000000_00000000,  // 62
            0b00000000_00000000,  // 63
            0b00000000_00000000,  // 64
            0b00000000_00000000,  // 65
            0b00000000_00000000,  // 66
            0b00000000_00000000,  // 67
            0b00000000_00000000,  // 68
            0b00000000_00000000,  // 69
            0b00000000_00000000,  // 6A
            0b00000000_00000000,  // 6B
            0b00000000_00000000,  // 6C
            0b00000000_00000000,  // 6D
            0b00000000_00000000,  // 6E
            0b00000000_00000000,  // 6F
            0b00000000_00000000,  // 70
            0b00000000_00000000,  // 71
            0b00000000_00000000,  // 72
            0b00000000_00000000,  // 73
            0b00000000_00000000,  // 74
            0b00000000_00000000,  // 75
            0b00000000_00000000,  // 76
            0b00000000_00000000,  // 77
            0b00000000_00000000,  // 78
            0b00000000_00000000,  // 79
            0b00000000_00000000,  // 7A
            0b00000000_00000000,  // 7B
            0b00000000_00000000,  // 7C
            0b00000000_00000000,  // 7D
            0b00000000_00000000,  // 7E
            0b00000000_00000000,  // 7F
            0b00000000_00000000,  // 80
            0b00000000_00000000,  // 81
            0b00000000_00000000,  // 82
            0b00000000_00000000,  // 83
            0b00000000_00000000,  // 84
            0b00000000_00000000,  // 85
            0b00000000_00000000,  // 86
            0b00000000_00000000,  // 87
            0b00000000_00000000,  // 88
            0b00000000_00000000,  // 89
            0b00000000_00000000,  // 8A
            0b00000000_00000000,  // 8B
            0b00000000_00000000,  // 8C
            0b00000000_00000000,  // 8D
            0b00000000_00000000,  // 8E
            0b00000000_00000000,  // 8F
            0b00000000_00000000,  // 90
            0b00000000_00000000,  // 91
            0b00000000_00000000,  // 92
            0b00000000_00000000,  // 93
            0b00000000_00000000,  // 94
            0b00000000_00000000,  // 95
            0b00000000_00000000,  // 96
            0b00000000_00000000,  // 97
            0b00000000_00000000,  // 98
            0b00000000_00000000,  // 99
            0b00000000_00000000,  // 9A
            0b00000000_00000000,  // 9B
            0b00000000_00000000,  // 9C
            0b00000000_00000000,  // 9D
            0b00000000_00000000,  // 9E
            0b00000000_00000000,  // 9F
            0b00000000_00000000,  // A0
            0b00000000_00000000,  // A1
            0b00000000_00000000,  // A2
            0b00000000_00000000,  // A3
            0b00000000_00000000,  // A4
            0b00000000_00000000,  // A5
            0b00000000_00000000,  // A6
            0b00000000_00000000,  // A7
            0b00000000_00000000,  // A8
            0b00000000_00000000,  // A9
            0b00000000_00000000,  // AA
            0b00000000_00000000,  // AB
            0b00000000_00000000,  // AC
            0b00000000_00000000,  // AD
            0b00000000_00000000,  // AE
            0b00000000_00000000,  // AF
            0b00000000_00000000,  // B0
            0b00000000_00000000,  // B1
            0b00000000_00000000,  // B2
            0b00000000_00000000,  // B3
            0b00000000_00000000,  // B4
            0b00000000_00000000,  // B5
            0b00000000_00000000,  // B6
            0b00000000_00000000,  // B7
            0b00000000_00000000,  // B8
            0b00000000_00000000,  // B9
            0b00000000_00000000,  // BA
            0b00000000_00000000,  // BB
            0b00000000_00000000,  // BC
            0b00000000_00000000,  // BD
            0b00000000_00000000,  // BE
            0b00000000_00000000,  // BF
            0b00000000_00000000,  // C0
            0b00000000_00000000,  // C1
            0b00000000_00000000,  // C2
            0b00000000_00000000,  // C3
            0b00000000_00000000,  // C4
            0b00000000_00000000,  // C5
            0b00000000_00000000,  // C6
            0b00000000_00000000,  // C7
            0b00000000_00000000,  // C8
            0b00000000_00000000,  // C9
            0b00000000_00000000,  // CA
            0b00000000_00000000,  // CB
            0b00000000_00000000,  // CC
            0b00000000_00000000,  // CD
            0b00000000_00000000,  // CE
            0b00000000_00000000,  // CF
            0b00000000_00000000,  // D0
            0b00000000_00000000,  // D1
            0b00000000_00000000,  // D2
            0b00000000_00000000,  // D3
            0b00000000_00000000,  // D4
            0b00000000_00000000,  // D5
            0b00000000_00000000,  // D6
            0b00000000_00000000,  // D7
            0b00000000_00000000,  // D8
            0b00000000_00000000,  // D9
            0b00000000_00000000,  // DA
            0b00000000_00000000,  // DB
            0b00000000_00000000,  // DC
            0b00000000_00000000,  // DD
            0b00000000_00000000,  // DE
            0b00000000_00000000,  // DF
            0b00000000_00000000,  // E0
            0b00000000_00000000,  // E1
            0b00000000_00000000,  // E2
            0b00000000_00000000,  // E3
            0b00000000_00000000,  // E4
            0b00000000_00000000,  // E5
            0b00000000_00000000,  // E6
            0b00000000_00000000,  // E7
            0b00000000_00000000,  // E8
            0b00000000_00000000,  // E9
            0b00000000_00000000,  // EA
            0b00000000_00000000,  // EB
            0b00000000_00000000,  // EC
            0b00000000_00000000,  // ED
            0b00000000_00000000,  // EE
            0b00000000_00000000,  // EF
            0b00000000_00000000,  // F0
            0b00000000_00000000,  // F1
            0b00000000_00000000,  // F2
            0b00000000_00000000,  // F3
            0b00000000_00000000,  // F4
            0b00000000_00000000,  // F5
            0b00000000_00000000,  // F6
            0b00000000_00000000,  // F7
            0b00000000_00000000,  // F8
            0b00000000_00000000,  // F9
            0b00000000_00000000,  // FA
            0b00000000_00000000,  // FB
            0b00000000_00000000,  // FC
            0b00000000_00000000,  // FD
            0b00000000_00000000,  // FE
            0b00000000_00000000,  // FF
        )

        val hello_world_ram = arrayOf(
            0b10100000_11110000,  // 00   INPUT ACC 0xF0  - load first char
            0b11100000_11100000,  // 01   OUTPUT ACC 0xE0 - update tx memory
            0b00000000_00000001,  // 02   LOAD ACC 1      - Start Bit
            0b11100000_11111111,  // 03   OUTPUT ACC 0xFF - Set serial port high
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 05   ADD ACC 1       - Increment count
            0b10011100_00000101,  // 06   JUMP NC 0x05    - repeat 50 times
            0b10100000_11100000,  // 07   INPUT ACC 0xE0  - read character
            0b00010000_00000001,  // 08   AND ACC 0X01    - mask bit0
            0b10010000_00001011,  // 09   JUMP Z 0x0B     - if zero output
            0b00000000_00000001,  // 0A   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 0B   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 0D   ADD ACC 1       - Increment count
            0b10011100_00001101,  // 0E   JUMP NC 0x0D    - repeat 50 times
            0b10100000_11100000,  // 0F   INPUT ACC 0xE0  - read character

            0b00010000_00000010,  // 10   AND ACC 0X02    - mask bit1
            0b10010000_00010011,  // 11   JUMP Z 0x13     - if zero output
            0b00000000_00000001,  // 12   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 13   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 15   ADD ACC 1       - Increment count
            0b10011100_00010101,  // 16   JUMP NC 0x15    - repeat 50 times
            0b10100000_11100000,  // 17   INPUT ACC 0xE0  - read character
            0b00010000_00000100,  // 18   AND ACC 0X04    - mask bit2
            0b10010000_00011011,  // 19   JUMP Z 0x1B     - if zero output
            0b00000000_00000001,  // 1A   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 1B   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 1D   ADD ACC 1       - Increment count
            0b10011100_00011101,  // 1E   JUMP NC 0x1D    - repeat 50 times
            0b10100000_11100000,  // 1F   INPUT ACC 0xE0  - read character

            0b00010000_00001000,  // 20   AND ACC 0X08    - mask bit3
            0b10010000_00100011,  // 21   JUMP Z 0x23     - if zero output
            0b00000000_00000001,  // 22   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 23   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 25   ADD ACC 1       - Increment count
            0b10011100_00100101,  // 26   JUMP NC 0x25    - repeat 50 times
            0b10100000_11100000,  // 27   INPUT ACC 0xE0  - read character
            0b00010000_00010000,  // 28   AND ACC 0X10    - mask bit4
            0b10010000_00101011,  // 29   JUMP Z 0x2B     - if zero output
            0b00000000_00000001,  // 2A   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 2B   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 2D   ADD ACC 1       - Increment count
            0b10011100_00101101,  // 2E   JUMP NC 0x2D    - repeat 50 times
            0b10100000_11100000,  // 2F   INPUT ACC 0xE0  - read character

            0b00010000_00100000,  // 30   AND ACC 0X20    - mask bit5
            0b10010000_00110011,  // 31   JUMP Z 0x33     - if zero output
            0b00000000_00000001,  // 32   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 33   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 35   ADD ACC 1       - Increment count
            0b10011100_00110101,  // 36   JUMP NC 0x35    - repeat 50 times
            0b10100000_11100000,  // 37   INPUT ACC 0xE0  - read character
            0b00010000_01000000,  // 38   AND ACC 0X40    - mask bit6
            0b10010000_00111011,  // 39   JUMP Z 0x3B     - if zero output
            0b00000000_00000001,  // 3A   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 3B   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 3D   ADD ACC 1       - Increment count
            0b10011100_00111101,  // 3E   JUMP NC 0x3D    - repeat 50 times
            0b10100000_11100000,  // 3F   INPUT ACC 0xE0  - read character

            0b00010000_10000000,  // 40   AND ACC 0X80    - mask bit7
            0b10010000_01000011,  // 41   JUMP Z 0x43     - if zero output
            0b00000000_00000001,  // 42   LOAD ACC 1      - else set 1
            0b11100000_11111111,  // 43   OUTPUT ACC 0xFF - Set serial port bit
            0b00000000_11001110,  // 04   LOAD ACC 0xCE   - wait loop (104us)
            0b01000000_00000001,  // 45   ADD ACC 1       - Increment count
            0b10011100_01000101,  // 46   JUMP NC 0x45    - repeat 50 times
            0b00000000_00000000,  // 47   LOAD ACC 0      - stop bit
            0b11100000_11111111,  // 48   OUTPUT ACC 0xFF - Set serial port bit
            0b01000000_00000001,  // 49   ADD ACC 1       - Increment count
            0b10011100_01001001,  // 4A   JUMP NC 0x49    - repeat 256 times
            0b00000000_00000000,  // 4B   LOAD ACC 0      - stop bit
            0b11100000_11111111,  // 4C   OUTPUT ACC 0xFF - Set serial port bit
            0b01000000_00000001,  // 4D   ADD ACC 1       - Increment count
            0b10011100_01001101,  // 4E   JUMP NC 0x4D    - repeat 256 times
            0b10100000_01010010,  // 4F   INPUT ACC 52    - read instruction

            0b01000000_00000001,  // 50   ADD ACC 1       - increment address field
            0b11100000_01010010,  // 51   OUT ACC 52      - update instruction
            0b10100000_11110000,  // 52   INPUT ACC 0xF0  - execute instruction
            0b11100000_11100000,  // 53   OUTPUT ACC 0xE0 - update tx memory
            0b00010000_11111111,  // 54   AND ACC 0xFF    - is char NULL?
            0b10010100_00000010,  // 55   JUMP NZ, 2      - no, TX
            0b00000000_11110000,  // 56   LOAD ACC 0xF0   - restore original instruction
            0b11100000_01010010,  // 57   OUT ACC 52
            0b10000000_01010110,  // 58   JUMP 56         - yes, halt

            0b00000000_10110111,  // F0  H      = 0x48 inv 10110111
            0b00000000_10111010,  // F1  E      = 0x45 inv 10111010
            0b00000000_10110011,  // F2  L      = 0x4C inv 10110011
            0b00000000_10110011,  // F3  L      = 0x4C inv 10110011
            0b00000000_10110000,  // F4  O      = 0x4F inv 10110000
            0b00000000_11011111,  // F5  'SP'   = 0x20 inv 11011111
            0b00000000_10101000,  // F6  W      = 0x57 inv 10101000
            0b00000000_10110000,  // F7  O      = 0x4F inv 10110000
            0b00000000_10101101,  // F8  R      = 0x52 inv 10101101
            0b00000000_10110011,  // F9  L      = 0x4C inv 10110011
            0b00000000_10111011,  // FA  D      = 0x44 inv 10111011
            0b00000000_11110010,  // FB  'CR'   = 0x0D inv 11110010
            0b00000000_11110101,  // FC  'LF'   = 0x0A inv 11110101
            0b00000000_00000000,  // FD  'NULL' = 0x00
            0b00000000_00000000,  // FE
            0b00000000_00000000,  // FF
        )
    }
}